#!/usr/bin/env bash

# setup script for providing internet to a spotify car thing, originally made by https://github.com/JoeyEamigh
# modified by https://github.com/68p to use nftables, and to utilize useful functions from https://github.com/bishopdynamics/

MAIN_INTERFACE="wlan0"
USBNET_PREFIX="172.16.42"
RPI_TYPE=$(cat /sys/firmware/devicetree/base/model | sed 's/\(.*\)\(Model\|Rev\).*/\1/')

# functions were originally made by bishopdynamics https://github.com/bishopdynamics/superbird-debian-kiosk/blob/main/setup_host.sh#L42

function forward_port() {
    

    # usage: forward_port <host port> <superbird port>
    # forward a tcp port to access service on superbird via host
    # if no superbird port is provided, same port number is used for both

    SOURCE="$1"
    DEST="$2"
    if [ -z "$DEST" ]; then
        DEST="$SOURCE"
    fi

    # Add rules for NAT table and PREROUTING chain
    nft add rule ip nat prerouting tcp dport "$SOURCE" iifname "eth0" dnat to "${USBNET_PREFIX}.2:$DEST"
    nft add rule ip nat prerouting tcp dport "$SOURCE" iifname "wlan0" dnat to "${USBNET_PREFIX}.2:$DEST"

    # Add rules to the FORWARD chain to allow traffic
    nft add rule ip filter forward ip daddr "${USBNET_PREFIX}.2" tcp dport "$DEST" ct state new,established,related accept
}

function append_if_missing() {
    # append string to file only if it does not already exist in the file
    STRING="$1"
    FILEPATH="$2"
    grep -q "$STRING" "$FILEPATH" || {
        echo "appending \"$STRING\" to $FILEPATH"
        echo "$STRING" >> "$FILEPATH"
        return 1
    }
    echo "Already found \"$STRING\" in $FILEPATH"
    return 0
}

# Enable IP forwarding
sysctl -w net.ipv4.ip_forward=1

# Ensure IP forwarding is enabled on boot
append_if_missing "net.ipv4.ip_forward = 1" /etc/sysctl.conf
sysctl -p

# install required packages
apt install -y ifupdown 

# create/reset nftable rules
nft flush ruleset

# create table and chain for filter (FORWARD) and nat (POSTROUTING)
nft add table ip filter
nft add table ip nat

# Set default policies
nft add chain ip filter input { type filter hook input priority 0 \; }
nft add chain ip filter forward { type filter hook forward priority 0 \; }
nft add chain ip filter output { type filter hook output priority 0 \; }

nft add chain ip nat prerouting { type nat hook prerouting priority -100 \; }
nft add chain ip nat postrouting { type nat hook postrouting priority 100 \; }

# allow usb0 forwarding
nft add rule ip filter forward iifname "usb0" oifname "$MAIN_INTERFACE" ip saddr "172.16.42.0/24" ct state new accept
nft add rule ip filter forward iifname "usb0" oifname "$MAIN_INTERFACE" ip saddr "172.16.42.0/24" ct state established,related accept

# Masquerade outgoing packets on nat table
nft add rule ip nat postrouting oifname "$MAIN_INTERFACE" masquerade

# SSH port forward | port 2022
forward_port 2022 22

# Remote debugger port forward | port 9222
forward_port 9222

# save rules, enable and start nftables service
nft list ruleset > /etc/nftables.conf
systemctl enable nftables
systemctl start nftables

# for pi zero models
if [[ "$RPI_TYPE" == *"Pi Zero"* ]]; then
    echo "Setting up networking for Pi Zero..."
            
    # stop networkmanager from managing relevant interfaces
    # this looks like ass i am so sorry
        cat << EOF > /etc/NetworkManager/conf.d/99-unmanaged-interfaces.conf
# generated by $0
[keyfile]
unmanaged-devices=interface-name:usb0;interface-name:eth0
EOF

    # create usb network config, this looks awful again :(
    cat << EOF > /etc/network/interfaces.d/usb0
# generated by $0
auto usb0
allow-hotplug usb0
iface usb0 inet static
    address ${USBNET_PREFIX}.1
    netmask 255.255.255.0
EOF

    cat << EOF > /etc/network/interfaces.d/eth0
# generated by $0
auto eth0
allow-hotplug eth0
iface eth0 inet static
    address ${USBNET_PREFIX}.1
    netmask 255.255.255.0
EOF

# for all other pi models
else 
    # stop networkmanager from managing usb0 and eth1
    cat << EOF > /etc/NetworkManager/conf.d/99-unmanaged-interfaces.conf
# generated by $0
[keyfile]
unmanaged-devices=interface-name:eth1;interface-name:usb0
EOF

    # create usb network config
    # this looks bad idk 
    cat << EOF > /etc/network/interfaces.d/eth1
# generated by $0
auto eth1
allow-hotplug eth1
iface eth1 inet static
    address ${USBNET_PREFIX}.1
    netmask 255.255.255.0
EOF

    cat << EOF > /etc/network/interfaces.d/usb0
# generated by $0
auto usb0
allow-hotplug usb0
iface usb0 inet static
    address ${USBNET_PREFIX}.1
    netmask 255.255.255.0
EOF
fi